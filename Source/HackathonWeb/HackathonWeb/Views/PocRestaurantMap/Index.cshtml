
@model IList<HackathonWeb.Models.Restaurant>
@{
    ViewBag.Title = "Poc";
}

<h2>Poc</h2>

<div>
    @foreach(var obj in Model) 
    {
        <li>Name:-    @obj.Address</li>
    }
</div>

<meta name="viewport" content="initial-scale=1.0, width=device-width" />



<div style="width: 640px; height: 480px" id="mapContainer"></div>
<br/>
<div style="width: 640px; height: 480px" id="mapNavigator"></div>
<script src="http://js.api.here.com/v3/3.0/mapsjs-core.js"
        type="text/javascript" charset="utf-8"></script>
<script src="http://js.api.here.com/v3/3.0/mapsjs-service.js"
        type="text/javascript" charset="utf-8"></script>
<script>
    // Initialize the platform object:
    var platform = new H.service.Platform({
        'app_id': '9shB49HQGahETgr6LWDZ',
        'app_code': '3CPwa96KM9xO-Z90EOBNig'
    });

    // Obtain the default map types from the platform object
    var maptypes = platform.createDefaultLayers();

    // Instantiate (and display) a map object:
    var map = new H.Map(
        document.getElementById('mapContainer'),
        maptypes.normal.map,
        {
            zoom: 17,
            center: { lng: 121.231749, lat: 25.077184 }
        });

    var naviMap = new H.Map(
        document.getElementById('mapNavigator'),
        maptypes.normal.map,
        {
            zoom: 15,
            center: { lng: 121.521, lat: 25.04885 }
        });

    var restaurantMap = new H.Map(
        document.getElementById('mapNavigator'),
        maptypes.normal.map,
        {
            zoom: 18,
            center: { lng: 121.521, lat: 25.04885 }
        });

    var SearchRestaurant = function(address) {
        // Create the parameters for the geocoding request:
        var geocodingParams = {
            searchText: '臺北市南港區三重路23號'
        };

        // Get an instance of the geocoding service:
        var geocoder = platform.getGeocodingService();

        // Call the geocode method with the geocoding parameters,
        // the callback and an error callback function (called if a
        // communication error occurs):
        geocoder.geocode(geocodingParams, onRestaurantResult, function(e) {
            alert(e);
        });

    };

    // Define a callback function to process the geocoding response:
    var onRestaurantResult = function(result) {
        var locations = result.Response.View[0].Result,
            position,
            marker;
        // Add a marker for each location found
        for (i = 0;  i < locations.length; i++) {
            position = {
                lat: locations[i].Location.DisplayPosition.Latitude,
                lng: locations[i].Location.DisplayPosition.Longitude
            };

            // marker = new H.map.Marker(position);
            var icon = new H.map.Icon(svgMarkup),
                marker = new H.map.Marker(position, {icon: icon});

            restaurantMap.addObject(marker);
            restaurantMap.setCenter(position);
        }
    };

    // Define a variable holding SVG mark-up that defines an icon image:
    var svgMarkup = '<svg width="24" height="24" ' +
        'xmlns="http://www.w3.org/2000/svg">' +
        '<rect stroke="white" fill="#1b468d" x="1" y="1" width="22" ' +
        'height="22" /><text x="12" y="18" font-size="12pt" ' +
        'font-family="Arial" font-weight="bold" text-anchor="middle" ' +
        'fill="white">R</text></svg>';

    // Create an icon, an object holding the latitude and longitude, and a marker:
    var icon = new H.map.Icon(svgMarkup),
        coords = {lng: 121.521, lat: 25.04885},
        marker = new H.map.Marker(coords, {icon: icon});

    // restaurantMap.addObject(marker);
    // restaurantMap.setCenter(coords);

    // Create the parameters for the routing request:
    var routingParameters = {
        // The routing mode:
        'mode': 'fastest;pedestrian',
        // The start point of the route:
        'waypoint0': 'geo!25.05258,121.52036',
        // The end point of the route:
        'waypoint1': 'geo!25.04459,121.52503',
        // To retrieve the shape of the route we choose the route
        // representation mode 'display'
        'representation': 'display'
    };

    // Define a callback function to process the routing response:
    var onResult = function (result) {
        var route,
            routeShape,
            startPoint,
            endPoint,
            linestring;
        if (result.response.route) {
            // Pick the first route from the response:
            route = result.response.route[0];
            // Pick the route's shape:
            routeShape = route.shape;

            // Create a linestring to use as a point source for the route line
            linestring = new H.geo.LineString();

            // Push all the points in the shape into the linestring:
            routeShape.forEach(function (point) {
                var parts = point.split(',');
                linestring.pushLatLngAlt(parts[0], parts[1]);
            });

            // Retrieve the mapped positions of the requested waypoints:
            startPoint = route.waypoint[0].mappedPosition;
            endPoint = route.waypoint[1].mappedPosition;

            // Create a polyline to display the route:
            routeLine = new H.map.Polyline(linestring, {
                style: { lineWidth: 10 },
                arrows: { fillColor: 'white', frequency: 2, width: 0.8, length: 0.7 }
            });

            // Create a marker for the start point:
            var startMarker = new H.map.Marker({
                lat: startPoint.latitude,
                lng: startPoint.longitude
            });

            // Create a marker for the end point:
            var endMarker = new H.map.Marker({
                lat: endPoint.latitude,
                lng: endPoint.longitude
            });

            // Add the route polyline and the two markers to the map:
            naviMap.addObjects([routeLine, startMarker, endMarker]);

            // Set the map's viewport to make the whole route visible:
            naviMap.setViewBounds(routeLine.getBounds());
        }
    };

    // Get an instance of the routing service:
    var router = platform.getRoutingService();

    // Call calculateRoute() with the routing parameters,
    // the callback and an error callback function (called if a
    // communication error occurs):
    router.calculateRoute(routingParameters, onResult,
        function (error) {
            alert(error.message);
        });
    
</script>
