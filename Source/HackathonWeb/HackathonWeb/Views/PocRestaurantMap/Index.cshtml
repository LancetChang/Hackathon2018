
@using HackathonWeb.Models
@model IList<HackathonWeb.Models.Restaurant>
@{
    ViewBag.Title = "Poc";
}

<h2>Poc</h2>

<meta name="viewport" content="initial-scale=1.0, width=device-width" />



<div style="width: 640px; height: 480px" id="mapContainer"></div>
<br />
<div style="width: 640px; height: 480px" id="mapNavigator"></div>
<script src="http://js.api.here.com/v3/3.0/mapsjs-core.js"
        type="text/javascript" charset="utf-8"></script>
<script src="http://js.api.here.com/v3/3.0/mapsjs-service.js"
        type="text/javascript" charset="utf-8"></script>
<script src="http://js.api.here.com/v3/3.0/mapsjs-mapevents.js"
        type="text/javascript" charset="utf-8"></script>
<script src="http://js.api.here.com/v3/3.0/mapsjs-ui.js"
        type="text/javascript" charset="utf-8"></script>
<link rel="stylesheet" type="text/css"
      href="http://js.api.here.com/v3/3.0/mapsjs-ui.css" />
<script>
	/*
	 <div>
    @foreach(var obj in Model)
    {
        <li>Name:-    @obj.Address</li>
    }
	    </div>

	 */

	var center = {
	    lat: 25.04885,
	    lng: 121.521
	};

	
	var magicDiff = 0.0017;
	var magicNumber = magicDiff;
	var oldMapZoom = 18;
	var maxMarker = 200;
	var dataAddress = [];
	var dataStoreName = [];
	var dataStoreTel = [];
	var dataPosition = [];
	var markerLocations = [];
	var markerContainer = [];

    // Initialize the platform object:
    var platform = new H.service.Platform({
        'app_id': '9shB49HQGahETgr6LWDZ',
        'app_code': '3CPwa96KM9xO-Z90EOBNig'
    });

    // Obtain the default map types from the platform object
    var maptypes = platform.createDefaultLayers();

    // Instantiate (and display) a map object:
    var restaurantMap = new H.Map(
        document.getElementById('mapNavigator'),
        maptypes.normal.map,
        {
            zoom: oldMapZoom,
            center: { lng: center.lng, lat: center.lat }
        });

	var mapEvents = new H.mapevents.MapEvents(restaurantMap);
	var behavior = new H.mapevents.Behavior(mapEvents);
	// Create the default UI:
	var ui = H.ui.UI.createDefault(restaurantMap, maptypes);

	// Add event listener:
	restaurantMap.addEventListener('dragend', function(evt) {
	    // Log 'dragend' and 'mouse' events:
	    console.log(evt.type, evt.currentPointer.type);
	    var nowMapCenter = restaurantMap.getCenter();
	    center.lng = nowMapCenter.lng;
	    center.lat = nowMapCenter.lat;
	});

	// Add event listener:
	restaurantMap.addEventListener('pointerup', function(evt) {
	    // Log 'dragend' and 'mouse' events:
	    
		if (evt.target.type == 3) {
		    console.log(evt.type, evt.target.getPosition());
		    console.log(markerContainer.length);
		    var index;
		    for (i = 0; i < dataPosition.length; ++i) {
		        if (dataPosition[i].lat == evt.target.getPosition().lat && dataPosition[i].lng == evt.target.getPosition().lng) {
		            console.log('found');
		            index = i;
		            break;
		        }
		    }

		    console.log(dataAddress[index]);
		    console.log(dataStoreName[index]);
		    console.log(dataStoreTel[index]);

		    // Create an info bubble object at a specific geographic location:
		    var bubble = new H.ui.InfoBubble({ lng: dataPosition[index].lng, lat: dataPosition[index].lat }, {
		        content: '店名：<div>' + dataStoreName[index] + '</div>' + '電話：<div>' + dataStoreTel[index] + '</div>' + '住址：<div>' + dataAddress[index] + '</div>'
		    });

            // Add info bubble to the UI:
		    ui.addBubble(bubble);
		}
	});

	restaurantMap.addEventListener('mapviewchangeend', function() {
	    oldMapZoom = restaurantMap.getZoom(); 

	    magicNumber = magicDiff + (18 - oldMapZoom) * (18 - oldMapZoom) * magicDiff;

	    console.log(oldMapZoom);
	    console.log(magicNumber);

	    if(oldMapZoom > 10)
	    {
	        RefreshMarker();
	    }
	});

    // Define a variable holding SVG mark-up that defines an icon image:
    var svgMarkup = '<svg width="24" height="24" ' +
        'xmlns="http://www.w3.org/2000/svg">' +
        '<rect stroke="white" fill="#1b468d" x="1" y="1" width="22" ' +
        'height="22" /><text x="12" y="18" font-size="12pt" ' +
        'font-family="Arial" font-weight="bold" text-anchor="middle" ' +
        'fill="white">R</text></svg>';

    // Create an icon, an object holding the latitude and longitude, and a marker:
    var icon = new H.map.Icon(svgMarkup),
        coords = {lng: 121.521, lat: 25.04885},
        marker = new H.map.Marker(coords, {icon: icon});

    // restaurantMap.addObject(marker);
    // restaurantMap.setCenter(coords);

    // Define a callback function to process the geocoding response:
    var onRestaurantResult = function(result) {
        var markerLocations = result.Response.View[0].Result,
            position,
            marker;
        // Add a marker for each location found
        for (i = 0;  i < markerLocations.length; i++) {
            position = {
                lat: markerLocations[i].Location.DisplayPosition.Latitude,
                lng: markerLocations[i].Location.DisplayPosition.Longitude
            };

            // marker = new H.map.Marker(position);
            var icon = new H.map.Icon(svgMarkup),
                marker = new H.map.Marker(position, {icon: icon});

            restaurantMap.addObject(marker);
            restaurantMap.setCenter(position);
        }
    };
    /*
    // Create the parameters for the geocoding request:
    var geocodingParams = {
        searchText: '臺北市南港區三重路23號'
    };

    // Get an instance of the geocoding service:
    var geocoder = platform.getGeocodingService();

    // Call the geocode method with the geocoding parameters,
    // the callback and an error callback function (called if a
    // communication error occurs):
    geocoder.geocode(geocodingParams, onRestaurantResult, function(e) {
        alert(e);
    });
    */

    function SearchRestaurant(address) {
        // Create the parameters for the geocoding request:
        var geocodingParams = {
            searchText: address
        };

        // Get an instance of the geocoding service:
        var geocoder = platform.getGeocodingService();

        // Call the geocode method with the geocoding parameters,
        // the callback and an error callback function (called if a
        // communication error occurs):
        geocoder.geocode(geocodingParams, onRestaurantResult, function(e) {
            alert(e);
        });

    };

    // alert('@Model[1].Address');

    @foreach (var d in Model)
    {
        @:dataAddress.push('@d.Address');
		@:dataStoreName.push('@d.Name');
        @:dataStoreTel.push('@d.Phone');

		@:var position = {
        @:lng:0,
		@:lat:0
        @:};

        @:position.lng = '@d.Longitude';
        @:position.lat = '@d.Latitude';

        @:dataPosition.push(position);
		@:console.log(position.lng, position.lat);
    }
	
    function RefreshMarker() {
        dataPosition.sort(function(a, b){return 0.5 - Math.random()});
        for (i = 0; i < maxMarker; ++i) {

            //alert(dataPosition[i].lat);
            //alert(dataPosition[i].lng);

            //alert(center.lat);
            //alert(center.lng);

            // alert(parseFloat(dataPosition[i].lng) + magicNumber);
            if (parseFloat(dataPosition[i].lng) + magicNumber > center.lng &&
                parseFloat(dataPosition[i].lng) - magicNumber < center.lng &&
                parseFloat(dataPosition[i].lat) + magicNumber > center.lat &&
                parseFloat(dataPosition[i].lat) - magicNumber < center.lat) {

				markerLocations.push(dataPosition[i]);
            }

        }

        console.log(dataPosition.length);
        console.log(markerLocations.length);

        for(i = 0; i < markerContainer.length; ++i)
        {
            restaurantMap.removeObject(markerContainer[i]);
            markerContainer.shift();
            --i;
        }

        // Add a marker for each location found
        for (i = 0; i < markerLocations.length; i++) {
            // marker = new H.map.Marker(position);
            var icon = new H.map.Icon(svgMarkup),
                marker = new H.map.Marker(markerLocations[i], { icon: icon });

            markerContainer.push(marker);
            restaurantMap.addObject(marker);
            // restaurantMap.setCenter(center);
        }

    };

	RefreshMarker();
</script>
